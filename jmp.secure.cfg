# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!                          KEEP THIS FILE SECURE                          !!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

[DATABASE]
# For database settings and the like

# ENGINE_URL #
#
# This is the SQLAlchemy engine creation string used to connect to JMP's back-
# end database. The format is as follows:
#   dialect+driver://username:password@host:port/database
# For example, let's look at:
#   postgresql://scott:tiger@localhost:5432/mydatabase
# This uses the username "scott" with the password "tiger" to connect to port
# 5432 on localhost to use the "mydatabase" database via the "postgresql" 
# driver.
#
# Default :> sqlite:///jmp.db
ENGINE_URL=sqlite:///jmp.db

[AUTH]
# For authentication and user identity settings

# USER_ID #
#
# This is the request environment variable that contains a user's unique
# identifier. This value _must_ always be the same thing for a given user.
# Something like a simple login username is acceptable provided that username
# is guaranteed to never change. An email address is also acceptable provided
# that email address never changes and is unique to a user.
#
# This identifier is never, ever shared and is used to define ownership of a
# given link. It is only stored internally as part of a salted hash.
#
# Default :> X-JMP-USER-ID
USER_ID=X-JMP-USER-ID

# USER_DISPLAY_NAME #
#
# This is the value that's used whenever we need to refer to a user in a
# human-readable format. Don't have this be any sort of extremely sensitive
# information. A good candidate for this would be email address or username.
#
# Default :> X-EMAIL-ADDR
USER_DISPLAY_NAME=X-EMAIL-ADDR

# SALT #
#
# This is the salt used when hashing user identifiers for ownership checks.
# Since your user identifier of choice may be considered sensitive information,
# a salt is brought into the mix to keep personally identifiable information
# secure.
#
# Because I KNOW someone is going to think they're smarter than cold, hard math
# some day, I'm now going to explain why you _really_ don't want to change this
# once you've got links in your database.
#
# Ownership identifiers in the backing database for JMP are represented as:
#   sha256( <configured_user_identifier> + <link_short> + <configured_salt> )
#
# Should an attacker have access to the database, they will still be unable
# to determine who owns a given link unless they have access to the configured
# salt and configured user identifier. Provided both of those things are kept
# secret, an attacker is going to have a rough time trying to brute force the
# user's identifier.
#
# The downside of this is that these three factors have to stay static for a
# given link else only admins will be able to modify the link. This is because
# the hash calculations before the salt change and after the salt change will
# differ. This mean that a given user no longer owns their links. On the bright
# side, it's extremely improbable for anyone else to own them.
#
# The only time that it is OK to edit this salt is at the very, very beginning.
# It is impossible (by design) to change the salt without losing information.
# If you manage to find a way to reverse SHA-256, I would highly recommend you
# publish a paper explaining how before the assassins get to you.
#
#              !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#              !! IF YOU'RE LAZY AND DIDN'T READ THE ABOVE, !!
#              !! YOU ARE RESPONSIBLE FOR COMPLETE LOSS OF  !!
#              !! LINK OWNERSHIP INFORMATION IF YOU EDIT    !!
#              !! THE SALT AFTER THE INITIAL SETUP OF JMP.  !!
#              !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# 
# Default :> LOLMIGHTYSALTYINHERE!
SALT=LOLMIGHTYSALTYINHERE!
